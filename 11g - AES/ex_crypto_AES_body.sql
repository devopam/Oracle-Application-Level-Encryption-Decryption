/*----------------------------------------------------------------------------------------
-- FILE NAME        : ex_crypto__aespkg_body.sql
-- Generated By     : Exilant Technologies Private Limited
-- Description      : Package body for ex_crypto_aes Oracle based DBMS_CRYPTO encryption and 
--                    decryption utilities
-- Date             : Sept 17, 2012
-- Author           : Ex!lant Development Team
-- Modification History:
------------------------------------------------------------------------------------------
--      When            Who                     What
------------------------------------------------------------------------------------------
--      17/09/2012      Ex! Dev Team            Initial Version
----------------------------------------------------------------------------------------*/
CREATE OR REPLACE PACKAGE BODY ex_crypto_aes
AS
    lv_charset VARCHAR2(30) := 'AL32UTF8';                                     
    
    FUNCTION f_get_encryption_type (in_n_encryptionkey_size IN PLS_INTEGER,numeric_flag IN PLS_INTEGER DEFAULT 0) 
    RETURN BINARY_INTEGER DETERMINISTIC
    IS
    BEGIN
        gv_pgm_nm := 'f_get_encryption_type';
        RETURN ((CASE in_n_encryptionkey_size 
                WHEN 128 THEN DBMS_CRYPTO.ENCRYPT_AES128
                WHEN 192 THEN DBMS_CRYPTO.ENCRYPT_AES192
                WHEN 256 THEN DBMS_CRYPTO.ENCRYPT_AES256
                END) 
                + DBMS_CRYPTO.CHAIN_CBC + 
                (CASE numeric_flag 
                 WHEN 0 THEN DBMS_CRYPTO.PAD_PKCS5
                 WHEN 1 THEN DBMS_CRYPTO.PAD_ZERO
                 END)
               );
    EXCEPTION
    WHEN OTHERS THEN
        gv_err_msg := 'Error occurred while processing input key size :'||in_n_encryptionkey_size;
        p_log_error(gv_err_msg, gv_pgm_nm);
        RETURN 0;
    END f_get_encryption_type;
    
    FUNCTION f_get_key(in_n_encryptionkey_size IN PLS_INTEGER)
    RETURN RAW DETERMINISTIC
    IS
    lr_key RAW(32) := UTL_I18N.STRING_TO_RAW ('Ex!l@n8Te3hn0l0giesPr1v@8L1m1teD',lv_charset);
    BEGIN
        gv_pgm_nm := 'f_get_key';
        
        RETURN UTL_RAW.SUBSTR(lr_key ,1,in_n_encryptionkey_size/8);     
        
    EXCEPTION
    WHEN OTHERS THEN
        gv_err_msg := 'Error occurred while processing input key size :'||in_n_encryptionkey_size;
        p_log_error(gv_err_msg, gv_pgm_nm);
        RETURN NULL;
    END f_get_key;    
    
    
    FUNCTION f_encrypt_raw(in_encrypt IN RAW, in_aes_size IN PLS_INTEGER DEFAULT 128, numeric_flag IN PLS_INTEGER DEFAULT 0)
    RETURN RAW 
    IS
    BEGIN
        gv_pgm_nm := 'f_raw_encrypt';
        
        IF in_encrypt IS NULL THEN
            RAISE ge_null_input;
        ELSE
            RETURN DBMS_CRYPTO.ENCRYPT ( src => TRIM(in_encrypt),
                                         typ => f_get_encryption_type(in_aes_size,numeric_flag),
                                         key => f_get_key(in_aes_size)
                                       );
        END IF;

    EXCEPTION
        WHEN ge_null_input THEN
            gv_err_msg := 'NULL Input string provided';
            p_log_error(gv_err_msg, gv_pgm_nm);
            RETURN NULL;
        WHEN OTHERS THEN
            gv_err_msg := 'Error occurred while processing input string :'||in_encrypt||' and keysize :'||in_aes_size;
            p_log_error(gv_err_msg, gv_pgm_nm);
            RETURN NULL;
    END f_encrypt_raw;
    
    FUNCTION f_string_encrypt(in_encrypt IN VARCHAR2, in_aes_size IN PLS_INTEGER DEFAULT 128, numeric_flag IN PLS_INTEGER DEFAULT 0)
    RETURN RAW
    IS
    BEGIN
        RETURN f_encrypt_raw(UTL_I18N.STRING_TO_RAW(TRIM(in_encrypt),lv_charset),in_aes_size,numeric_flag);
    EXCEPTION
        WHEN OTHERS THEN
            gv_pgm_nm := 'f_string_encrypt';
            gv_err_msg := 'Error occurred while processing input string :'||in_encrypt||' and keysize :'||in_aes_size;
            p_log_error(gv_err_msg, gv_pgm_nm);
            RETURN NULL;
    END f_string_encrypt; 

    FUNCTION f_number_encrypt(in_encrypt IN NUMBER,in_aes_size IN PLS_INTEGER DEFAULT 128, numeric_flag IN PLS_INTEGER DEFAULT 0)
    RETURN RAW
    IS
    BEGIN
        RETURN f_encrypt_raw(UTL_I18N.STRING_TO_RAW(TRIM(TO_CHAR(in_encrypt)),lv_charset),in_aes_size,numeric_flag);
    EXCEPTION
        WHEN OTHERS THEN
            gv_pgm_nm := 'f_number_encrypt';
            gv_err_msg := 'Error occurred while processing input NUMBER :'||in_encrypt||' and keysize :'||in_aes_size;
            p_log_error(gv_err_msg, gv_pgm_nm);
            RETURN NULL;
    END f_number_encrypt;

    
    FUNCTION f_decrypt_raw(in_decrypt IN RAW,in_aes_size IN PLS_INTEGER DEFAULT 128, numeric_flag IN PLS_INTEGER DEFAULT 0) 
    RETURN RAW
    IS
    BEGIN
        gv_pgm_nm := 'f_decrypt_raw';
        IF TRIM(in_decrypt) IS NULL THEN
            RAISE ge_null_input;
        ELSE
            RETURN DBMS_CRYPTO.DECRYPT ( src => TRIM(in_decrypt),
                                         typ => f_get_encryption_type(in_aes_size,numeric_flag),
                                         key => f_get_key(in_aes_size)
                                       );        
        END IF;

    EXCEPTION
        WHEN ge_null_input THEN
            gv_err_msg := 'NULL Input Decryption string provided';
            p_log_error(gv_err_msg, gv_pgm_nm);
            RETURN NULL;
        WHEN OTHERS THEN
            gv_err_msg := 'Error occurred while processing input string :'||in_decrypt||' and keysize :'||in_aes_size;
            p_log_error(gv_err_msg, gv_pgm_nm);
            RETURN NULL;
    end f_decrypt_raw;


    FUNCTION f_string_decrypt(in_decrypt IN RAW,in_aes_size IN PLS_INTEGER DEFAULT 128, numeric_flag IN PLS_INTEGER DEFAULT 0) 
    RETURN VARCHAR2
    IS
    BEGIN
        RETURN TRIM(UTL_I18N.RAW_TO_CHAR(f_decrypt_raw(in_decrypt,in_aes_size,numeric_flag),lv_charset));
    EXCEPTION
        WHEN OTHERS THEN
            gv_pgm_nm := 'f_string_decrypt';
            gv_err_msg := 'Error occurred while processing input string :'||in_decrypt||' and keysize :'||in_aes_size;
            p_log_error(gv_err_msg, gv_pgm_nm);
            RETURN NULL;
    END f_string_decrypt;
    

END ex_crypto_aes; 
/
